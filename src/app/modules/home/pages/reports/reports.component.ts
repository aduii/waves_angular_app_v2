import { Component, OnInit, Renderer2 } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { saveAs } from 'file-saver';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { LoginService } from 'src/app/modules/auth/pages/login/login.service';
import { ReportsService } from './reports.service';
import { ScanService } from '../scan/scan.service';

interface IReport {
  id: number;
  name: string;
  date: string;
  ip: string;
  user: number;
}

interface IVulnerability {
  id: number;
  cveCode: string;
  description: string;
  exploit: string;
  exploitLink: string;
  impact: number;
  report: number;
}

@Component({
  selector: 'app-reports',
  templateUrl: './reports.component.html',
  styleUrls: ['./reports.component.css'],
})
export class ReportsComponent implements OnInit {
  user_id: any;
  user_name: any;
  myControl = new FormControl<string | IReport>('');
  options: IReport[] = [];
  filteredOptions!: Observable<IReport[]>;

  ngOnInit(): void {
    const get_user = this.loginService.getUser();
    if (get_user) {
      this.user_id = get_user.id;
      this.user_name = get_user.name;
    }

    this.reportsService.getReports(this.user_id).subscribe(
      (response) => {
        this.options = response;
        this.filteredOptions = this.myControl.valueChanges.pipe(
          startWith(''),
          map((value) => {
            const name = typeof value === 'string' ? value : value?.name;
            return name ? this._filter(name as string) : this.options.slice();
          })
        );
      },
      (error) => {
        console.error('Error to Get Reports:', error);
      }
    );
  }

  constructor(
    private http: HttpClient,
    private renderer2: Renderer2,
    private loginService: LoginService,
    private reportsService: ReportsService,
  ) {}

  saveReport(option: IReport) {
    // this.http.get('/assets/html_report.html', { responseType: 'text' }).subscribe(html => {
    //   const blob = new Blob([html], { type: 'text/html' });
    //   saveAs(blob, 'my-file.html');
    // });
    let ip_scanner:any;
    var vulnerabilityBody: string = '';
    let vulnerabilityArray: IVulnerability[] = [];
    this.reportsService.getVulnerabilitiesByReportId(option.id).subscribe(
      (data) => {
        this.reportsService.getReportById(option.id).subscribe(
          (response) => {
            ip_scanner = response;
            ip_scanner.ip;
            vulnerabilityArray = data;
            for (let vulnerabilityItem of vulnerabilityArray) {
              var description_style = 'display:none;';
              var exploit_style = 'display:none;';
              var exploit_link_style = 'display:none;';

              if (vulnerabilityItem.description != 'Without description') {
                description_style = 'display:block;';
              }
              if (vulnerabilityItem.exploit != 'Without exploit') {
                exploit_style = 'display:block;';
              }
              if (vulnerabilityItem.exploitLink != 'Without exploit link') {
                exploit_link_style = 'display:block;';
              }

              vulnerabilityBody += `
              <p>CVE Code: ${vulnerabilityItem.cveCode}</p>
              <blockquote><p style="${description_style}">Description: ${vulnerabilityItem.description}</p></blockquote>
              <blockquote><p style="${exploit_link_style}">Exploit: <a href="${vulnerabilityItem.exploitLink}" target="_blank">${vulnerabilityItem.exploit}</a> </p> </blockquote>
              <blockquote><p>Impact: ${vulnerabilityItem.impact}</p></blockquote>
              `;
            }

            const html = `
            <!doctype html>
            <html>
              <head>
                <title>WAVES Scanning Report</title>
              </head>
              <body>
                <h1>WAVES Scanning Report</h1>
                <h2>Report ID ${option.id}</h2>
                <h3>IP Scanned: ${ip_scanner.ip}</h3>
                <h3>Generated by: ${this.user_name}</h3>
                <h3>Date: ${option.date}</h3>
              </body>
              ${vulnerabilityBody}
            </html>
            `;
            const blob = new Blob([html], { type: 'text/html;charset=utf-8' });
            saveAs(blob, 'doc_reportid_' + option.id + '.html');
          },
          (error) => {
            console.error('Error to Get Report:', error);
          });
      },
      (error) => {
        console.error('Error to Get Vulnerabilities:', error);
      }
    );
  }

  displayFn(report: IReport): string {
    return report && report.name ? report.name : '';
  }

  private _filter(name: string): IReport[] {
    const filterValue = name.toLowerCase();

    return this.options.filter((option) =>
      option.name.toLowerCase().includes(filterValue)
    );
  }
}
